// Generated by view binder compiler. Do not edit!
package com.shahin.androidflow.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.card.MaterialCardView;
import com.shahin.androidflow.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FavoriteRecipeRowLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView favoriteClockImageView;

  @NonNull
  public final TextView favoriteClockTextView;

  @NonNull
  public final TextView favoriteDescriptionTextView;

  @NonNull
  public final ImageView favoriteHeartImageView;

  @NonNull
  public final TextView favoriteHeartTextView;

  @NonNull
  public final ImageView favoriteLeafImageView;

  @NonNull
  public final TextView favoriteLeafTextView;

  @NonNull
  public final ImageView favoriteRecipeImageView;

  @NonNull
  public final ConstraintLayout favoriteRecipesRowLayout;

  @NonNull
  public final MaterialCardView favoriteRowCardView;

  @NonNull
  public final TextView favoriteTitleTextView;

  private FavoriteRecipeRowLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView favoriteClockImageView, @NonNull TextView favoriteClockTextView,
      @NonNull TextView favoriteDescriptionTextView, @NonNull ImageView favoriteHeartImageView,
      @NonNull TextView favoriteHeartTextView, @NonNull ImageView favoriteLeafImageView,
      @NonNull TextView favoriteLeafTextView, @NonNull ImageView favoriteRecipeImageView,
      @NonNull ConstraintLayout favoriteRecipesRowLayout,
      @NonNull MaterialCardView favoriteRowCardView, @NonNull TextView favoriteTitleTextView) {
    this.rootView = rootView;
    this.favoriteClockImageView = favoriteClockImageView;
    this.favoriteClockTextView = favoriteClockTextView;
    this.favoriteDescriptionTextView = favoriteDescriptionTextView;
    this.favoriteHeartImageView = favoriteHeartImageView;
    this.favoriteHeartTextView = favoriteHeartTextView;
    this.favoriteLeafImageView = favoriteLeafImageView;
    this.favoriteLeafTextView = favoriteLeafTextView;
    this.favoriteRecipeImageView = favoriteRecipeImageView;
    this.favoriteRecipesRowLayout = favoriteRecipesRowLayout;
    this.favoriteRowCardView = favoriteRowCardView;
    this.favoriteTitleTextView = favoriteTitleTextView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FavoriteRecipeRowLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FavoriteRecipeRowLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.favorite_recipe_row_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FavoriteRecipeRowLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.favorite_clock_imageView;
      ImageView favoriteClockImageView = ViewBindings.findChildViewById(rootView, id);
      if (favoriteClockImageView == null) {
        break missingId;
      }

      id = R.id.favorite_clock_textView;
      TextView favoriteClockTextView = ViewBindings.findChildViewById(rootView, id);
      if (favoriteClockTextView == null) {
        break missingId;
      }

      id = R.id.favorite_description_textView;
      TextView favoriteDescriptionTextView = ViewBindings.findChildViewById(rootView, id);
      if (favoriteDescriptionTextView == null) {
        break missingId;
      }

      id = R.id.favorite_heart_imageView;
      ImageView favoriteHeartImageView = ViewBindings.findChildViewById(rootView, id);
      if (favoriteHeartImageView == null) {
        break missingId;
      }

      id = R.id.favorite_heart_textView;
      TextView favoriteHeartTextView = ViewBindings.findChildViewById(rootView, id);
      if (favoriteHeartTextView == null) {
        break missingId;
      }

      id = R.id.favorite_leaf_imageView;
      ImageView favoriteLeafImageView = ViewBindings.findChildViewById(rootView, id);
      if (favoriteLeafImageView == null) {
        break missingId;
      }

      id = R.id.favorite_leaf_textView;
      TextView favoriteLeafTextView = ViewBindings.findChildViewById(rootView, id);
      if (favoriteLeafTextView == null) {
        break missingId;
      }

      id = R.id.favorite_recipe_imageView;
      ImageView favoriteRecipeImageView = ViewBindings.findChildViewById(rootView, id);
      if (favoriteRecipeImageView == null) {
        break missingId;
      }

      ConstraintLayout favoriteRecipesRowLayout = (ConstraintLayout) rootView;

      id = R.id.favoriteRowCardView;
      MaterialCardView favoriteRowCardView = ViewBindings.findChildViewById(rootView, id);
      if (favoriteRowCardView == null) {
        break missingId;
      }

      id = R.id.favorite_title_textView;
      TextView favoriteTitleTextView = ViewBindings.findChildViewById(rootView, id);
      if (favoriteTitleTextView == null) {
        break missingId;
      }

      return new FavoriteRecipeRowLayoutBinding((ConstraintLayout) rootView, favoriteClockImageView,
          favoriteClockTextView, favoriteDescriptionTextView, favoriteHeartImageView,
          favoriteHeartTextView, favoriteLeafImageView, favoriteLeafTextView,
          favoriteRecipeImageView, favoriteRecipesRowLayout, favoriteRowCardView,
          favoriteTitleTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
