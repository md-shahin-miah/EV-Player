// Generated by Dagger (https://dagger.dev).
package com.shahin.androidflow.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Converter;
import retrofit2.Retrofit;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkingModule_ProvideRetrofitClientFactory implements Factory<Retrofit> {
  private final Provider<OkHttpClient> okHttpClientProvider;

  private final Provider<String> baseUrlProvider;

  private final Provider<Converter.Factory> converterFactoryProvider;

  public NetworkingModule_ProvideRetrofitClientFactory(Provider<OkHttpClient> okHttpClientProvider,
      Provider<String> baseUrlProvider, Provider<Converter.Factory> converterFactoryProvider) {
    this.okHttpClientProvider = okHttpClientProvider;
    this.baseUrlProvider = baseUrlProvider;
    this.converterFactoryProvider = converterFactoryProvider;
  }

  @Override
  public Retrofit get() {
    return provideRetrofitClient(okHttpClientProvider.get(), baseUrlProvider.get(), converterFactoryProvider.get());
  }

  public static NetworkingModule_ProvideRetrofitClientFactory create(
      Provider<OkHttpClient> okHttpClientProvider, Provider<String> baseUrlProvider,
      Provider<Converter.Factory> converterFactoryProvider) {
    return new NetworkingModule_ProvideRetrofitClientFactory(okHttpClientProvider, baseUrlProvider, converterFactoryProvider);
  }

  public static Retrofit provideRetrofitClient(OkHttpClient okHttpClient, String baseUrl,
      Converter.Factory converterFactory) {
    return Preconditions.checkNotNullFromProvides(NetworkingModule.INSTANCE.provideRetrofitClient(okHttpClient, baseUrl, converterFactory));
  }
}
